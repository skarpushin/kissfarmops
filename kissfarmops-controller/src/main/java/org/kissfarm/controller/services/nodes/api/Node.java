package org.kissfarm.controller.services.nodes.api;

import org.kissfarm.controller.services.agent_auth_token.api.AgentAuthToken;
import org.summerb.approaches.jdbccrud.api.dto.HasAuthor;
import org.summerb.approaches.jdbccrud.api.dto.HasId;
import org.summerb.approaches.jdbccrud.api.dto.HasTimestamps;

import lombok.Data;

/**
 * Row in a table which represents a single Node.
 * 
 * NOTE: I was struggling on impl approach. And I was really considering using
 * existing infrastructure Users, Permissions, Passwords to represent a Node.
 * But I decided to make a specific service for nodes to make it better suited
 * for its scenarios
 * 
 * @author Sergey Karpushin
 *
 */
@Data
public class Node implements HasId<String>, HasAuthor, HasTimestamps {
	private static final long serialVersionUID = 7767256629987403989L;

	/**
	 * Some id generated by node itself
	 */
	private String id;
	private long createdAt;
	private long modifiedAt;
	private String createdBy;
	private String modifiedBy;

	public static final int FN_ID_SIZE = 36;

	public static final String FN_AGENT_AUTH_TOKEN = "agentAuthToken";
	public static final int FN_AGENT_AUTH_TOKEN_SIZE = 64;

	public static final String FN_PASSWORD = "password";
	public static final int FN_PASSWORD_SIZE = 64;

	public static final String FN_HOST_NAME = "hostName";
	public static final int FN_HOST_NAME_SIZE = 128;

	public static final String FN_PUBLIC_IP = "publicIp";
	public static final int FN_PUBLIC_IP_SIZE = 24;

	public static final String FN_BLOCKED = "blocked";

	/**
	 * Token used by agent when self-registering. In fact foreign key to
	 * {@link AgentAuthToken}
	 */
	private String agentAuthToken;

	/**
	 * Node password is generated on controller and transmitted to Node upon
	 * registration. Later on node will have to use it to "login"
	 */
	private String password;

	private String hostName;
	private String publicIp;

	/**
	 * 'True' if node should be blocked from connecting to server
	 */
	private boolean blocked;
}
